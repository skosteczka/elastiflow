#------------------------------------------------------------------------------
# Copyright (C)2018 KOIOSSIAN
# 
# The contents of this file and/or repository are subject to the Koiossian
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/koiossian_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Koiossian. Portions created by
# Koiossian are Copyright (C)2018 Koiossian. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][type] == "ipfix" {
    # If flows are sent through a proxy that adds exporterIPv4Address or exporterIPv6Address, then reset node.ipaddr and node.hostname.
    if [ipfix][exporterIPv4Address] or [ipfix][exporterIPv6Address] {
      if [ipfix][exporterIPv4Address] {
        mutate {
          id => "ipfix_set_node_exporter_ipv4"
          replace => {
            "[node][ipaddr]" => "%{[ipfix][exporterIPv4Address]}"
            "[node][hostname]" => "%{[ipfix][exporterIPv4Address]}"
          }
        }
      } else if [ipfix][exporterIPv6Address] {
        mutate {
          id => "ipfix_set_node_exporter_ipv6"
          replace => {
            "[node][ipaddr]" => "%{[ipfix][exporterIPv6Address]}"
            "[node][hostname]" => "%{[ipfix][exporterIPv6Address]}"
          }
        }
      }

      if [@metadata][resolve_ip2host] == "true" {
        dns {
          id => "ipfix_dns_node_name"
          reverse => [ "[node][hostname]" ]
          action => "replace"
          nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
        }
      }
    }
    
    # Populate normalized ElastiFlow fields with simple mapping from IPFIX flow fields.
    if [ipfix][protocolIdentifier] {
      mutate {
        id => "ipfix_simple_mappings_add_ip_protocol"
        add_field => { "[flow][ip_protocol]" => "%{[ipfix][protocolIdentifier]}" }
      }
      mutate {
        id => "ipfix_simple_mappings_convert_ip_protocol"
        convert => { "[flow][ip_protocol]" => "integer" }
      }
    }
    if [ipfix][tcpControlBits] {
      mutate {
        id => "ipfix_simple_mappings_add_tcp_flags"
        add_field => { "[flow][tcp_flags]" => "%{[ipfix][tcpControlBits]}" }
      }
    }
    if [ipfix][ipVersion] {
      mutate {
        id => "ipfix_simple_mappings_add_ip_version"
        add_field => { "[flow][ip_version]" => "IPv%{[ipfix][ipVersion]}" }
      }
    }
    if [ipfix][samplingFlowInterval] {
      mutate {
        id => "ipfix_simple_mappings_add_sampling_interval"
        add_field => { "[flow][sampling_interval]" => "%{[ipfix][samplingFlowInterval]}" }
      }
      mutate {
        id => "ipfix_simple_mappings_convert_sampling_interval"
        convert => { "[flow][sampling_interval]" => "integer" }
      }
    }
    if [ipfix][sourceMacAddress] {
      mutate {
        id => "ipfix_simple_mappings_add_src_mac_eth"
        add_field => { "[flow][src_mac]" => "%{[ipfix][sourceMacAddress]}" }
      }
    }
    if [ipfix][destinationMacAddress] {
      mutate {
        id => "ipfix_simple_mappings_add_dst_mac_eth"
        add_field => { "[flow][dst_mac]" => "%{[ipfix][destinationMacAddress]}" }
      }
    }

    # Populate normalized ElastiFlow fields with IPv4 or IPv6 specific fields.
    if [ipfix][sourceIPv4Address] or [ipfix][destinationIPv4Address] or [ipfix][ipVersion] == 4 {
      # Looks like an IPv4 flow.
      if ![flow][ip_version] {
        mutate {
          id => "ipfix_ipv4_ip_version"
          add_field => { "[flow][ip_version]" => "IPv4" }
        }
      }

      if [ipfix][sourceIPv4Address] {
        mutate {
          id => "ipfix_ipv4_mappings_add_src_addr"
          add_field => { "[flow][src_addr]" => "%{[ipfix][sourceIPv4Address]}" }
        }
      }
      if [ipfix][sourceIPv4PrefixLength] {
        mutate {
          id => "ipfix_ipv4_mappings_add_src_mask_len"
          add_field => { "[flow][src_mask_len]" => "%{[ipfix][sourceIPv4PrefixLength]}" }
        }
      }
      if [ipfix][destinationIPv4Address] {
        mutate {
          id => "ipfix_ipv4_mappings_add_dst_addr"
          add_field => { "[flow][dst_addr]" => "%{[ipfix][destinationIPv4Address]}" }
        }
      }
      if [ipfix][destinationIPv4PrefixLength] {
        mutate {
          id => "ipfix_ipv4_mappings_add_dst_mask_len"
          add_field => { "[flow][dst_mask_len]" => "%{[ipfix][destinationIPv4PrefixLength]}" }
        }
      }
      if [ipfix][ipNextHopIPv4Address] {
        mutate {
          id => "ipfix_ipv4_mappings_add_next_hop"
          add_field => { "[flow][next_hop]" => "%{[ipfix][ipNextHopIPv4Address]}" }
        }
      }
      if [ipfix][bgpNextHopIPv4Address] {
        mutate {
          id => "ipfix_ipv4_mappings_add_bgp_next_hop"
          add_field => { "[flow][bgp_next_hop]" => "%{[ipfix][bgpNextHopIPv4Address]}" }
        }
      }
    } else if [sourceIPv6Address] or [destinationIPv6Address] or [ipVersion] == 6 {
      # Looks like an IPv6 flow.
      if ![flow][ip_version] {
        mutate {
          id => "ipfix_ipv6_ip_version"
          add_field => { "[flow][ip_version]" => "IPv6" }
        }
      }
      
      if [ipfix][sourceIPv6Address] {
        mutate {
          id => "ipfix_ipv6_mappings_add_src_addr"
          add_field => { "[flow][src_addr]" => "%{[ipfix][sourceIPv6Address]}" }
        }
      }
      if [ipfix][sourceIPv6PrefixLength] {
        mutate {
          id => "ipfix_ipv6_mappings_add_src_mask_len"
          add_field => { "[flow][src_mask_len]" => "%{[ipfix][sourceIPv6PrefixLength]}" }
        }
      }
      if [ipfix][destinationIPv6Address] {
        mutate {
          id => "ipfix_ipv6_mappings_add_dst_addr"
          add_field => { "[flow][dst_addr]" => "%{[ipfix][destinationIPv6Address]}" }
        }
      }
      if [ipfix][destinationIPv6PrefixLength] {
        mutate {
          id => "ipfix_ipv6_mappings_add_dst_mask_len"
          add_field => { "[flow][dst_mask_len]" => "%{[ipfix][destinationIPv6PrefixLength]}" }
        }
      }
      if [ipfix][ipNextHopIPv6Address] {
        mutate {
          id => "ipfix_ipv6_mappings_add_next_hop"
          add_field => { "[flow][next_hop]" => "%{[ipfix][ipNextHopIPv6Address]}" }
        }
      }
      if [ipfix][bgpNextHopIPv6Address] {
        mutate {
          id => "ipfix_ipv6_mappings_add_bgp_next_hop"
          add_field => { "[flow][bgp_next_hop]" => "%{[ipfix][bgpNextHopIPv6Address]}" }
        }
      }
    } else {
      # Did not recognize IP version.
      mutate {
        id => "ipfix_ip_version_not_recognized"
        add_tag => [ "__ipfix_ip_version_not_recognized" ]
        remove_field => [ "[flow][ip_version]" ]
      }
    }

    # Populate normalized ElastiFlow fields with source protocol port.
    if [ipfix][sourceTransportPort] {
      mutate {
        id => "ipfix_add_src_port_transport"
        add_field => { "[flow][src_port]" => "%{[ipfix][sourceTransportPort]}" }
      }
    } else if [ipfix][tcpSourcePort] {
      mutate {
        id => "ipfix_add_src_port_tcp"
        add_field => { "[flow][src_port]" => "%{[ipfix][tcpSourcePort]}" }
      }
    } else if [ipfix][udpSourcePort] {
      mutate {
        id => "ipfix_add_src_port_udp"
        add_field => { "[flow][src_port]" => "%{[ipfix][udpSourcePort]}" }
      }
    }
    if [flow][src_port] {
      mutate {
        id => "ipfix_convert_src_port"
        convert => { "[flow][src_port]" => "integer" }
      }
    }

    # Populate normalized ElastiFlow fields with destination protocol port.
    if [ipfix][destinationTransportPort] {
      mutate {
        id => "ipfix_add_dst_port_transport"
        add_field => { "[flow][dst_port]" => "%{[ipfix][destinationTransportPort]}" }
      }
    } else if [ipfix][tcpDestinationPort] {
      mutate {
        id => "ipfix_add_dst_port_tcp"
        add_field => { "[flow][dst_port]" => "%{[ipfix][tcpDestinationPort]}" }
      }
    } else if [ipfix][udpDestinationPort] {
      mutate {
        id => "ipfix_add_dst_port_udp"
        add_field => { "[flow][dst_port]" => "%{[ipfix][udpDestinationPort]}" }
      }
    }
    if [flow][dst_port] {
      mutate {
        id => "ipfix_convert_dst_port"
        convert => { "[flow][dst_port]" => "integer" }
      }
    }

    # Populate normalized ElastiFlow fields with ingress interface index.
    if [ipfix][ingressInterface] {
      mutate {
        id => "ipfix_add_in_if_index"
        add_field => { "[flow][input_snmp]" => "%{[ipfix][ingressInterface]}" }
      }
    } else if [ipfix][ingressPhysicalInterface] {
      mutate {
        id => "ipfix_add_in_if_index_phy"
        add_field => { "[flow][input_snmp]" => "%{[ipfix][ingressPhysicalInterface]}" }
      }
    }

    # Populate normalized ElastiFlow fields with egress interface index.
    if [ipfix][egressInterface] {
      mutate {
        id => "ipfix_add_out_if_index"
        add_field => { "[flow][output_snmp]" => "%{[ipfix][egressInterface]}" }
      }
    } else if [ipfix][egressPhysicalInterface] {
      mutate {
        id => "ipfix_add_out_if_index_phy"
        add_field => { "[flow][output_snmp]" => "%{[ipfix][egressPhysicalInterface]}" }
      }
    }

    # Populate normalized ElastiFlow fields with TOS value if available.
    if [ipfix][ipDiffServCodePoint] {
      mutate {
        id => "ipfix_add_tos_ip_dscp"
        add_field => { "[flow][tos]" => "%{[ipfix][ipDiffServCodePoint]}" }
      }
    } else if [ipfix][ipPrecedence] {
      mutate {
        id => "ipfix_add_tos_ip_prec"
        add_field => { "[flow][tos]" => "%{[ipfix][ipPrecedence]}" }
      }
    } else if [ipfix][ipClassOfService] {
      mutate {
        id => "ipfix_add_tos_ip_cos"
        add_field => { "[flow][tos]" => "%{[ipfix][ipClassOfService]}" }
      }
    }

    # Populate normalized ElastiFlow fields with flow directiom (ingress/egress).
    if [ipfix][flowDirection] == 0 {
      mutate {
        id => "ipfix_add_direction_ingress"
        add_field => {
          "[flow][direction]" => "ingress"
        }
      }
    } else if [ipfix][flowDirection] == 1 {
      mutate {
        id => "ipfix_add_direction_egress"
        add_field => {
          "[flow][direction]" => "egress"
        }
      }
    } else {
      mutate {
        id => "ipfix_direction_not_recognized"
        add_field => { "[flow][direction]" => "undetermined" }
        add_tag => [ "__ipfix_direction_not_recognized" ]
      }
    }

    # Populate normalized ElastiFlow fields with bytes if available.
    if [ipfix][octetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes"
        add_field => { "[flow][bytes]" => "%{[ipfix][octetDeltaCount]}" }
      }
    } else if [ipfix][layer2OctetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes_l2"
        add_field => { "[flow][bytes]" => "%{[ipfix][layer2OctetDeltaCount]}" }
      }
    } else if [ipfix][postOctetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes_post"
        add_field => { "[flow][bytes]" => "%{[ipfix][postOctetDeltaCount]}" }
      }
    } else if [ipfix][postLayer2OctetDeltaCount] {
      mutate {
        id => "ipfix_add_bytes_l2_post"
        add_field => { "[flow][bytes]" => "%{[ipfix][postLayer2OctetDeltaCount]}" }
      }
    }
    if [flow][bytes] {
      mutate {
        id => "ipfix_convert_bytes"
        convert => { "[flow][bytes]" => "integer" }
      }
    }

    # Populate normalized ElastiFlow fields with packets if available.
    if [ipfix][packetDeltaCount] {
      mutate {
        id => "ipfix_add_packets"
        add_field => { "[flow][packets]" => "%{[ipfix][packetDeltaCount]}" }
      }
    } else if [ipfix][layer2FrameDeltaCount] {
      mutate {
        id => "ipfix_add_packets_l2_frame"
        add_field => { "[flow][packets]" => "%{[ipfix][layer2FrameDeltaCount]}" }
      }
    } else if [ipfix][postPacketDeltaCount] {
      mutate {
        id => "ipfix_add_packets_post"
        add_field => { "[flow][packets]" => "%{[ipfix][postPacketDeltaCount]}" }
      }
    }
    if [flow][packets] {
      mutate {
        id => "ipfix_convert_packets"
        convert => { "[flow][packets]" => "integer" }
      }
    }
    
    # If sampled IPFIX, adjust Bytes and Packets accordingly.
    if [flow][sampling_interval] {
      if [flow][bytes] and [flow][sampling_interval] > 0 {
        ruby {
          id => "ipfix_adjust_sampled_bytes"
          code => "
            event.set( '[flow][bytes]', event.get('[flow][bytes]').to_i * event.get('[flow][sampling_interval]').to_i )
          "
        }
      }
      if [flow][packets] and [flow][sampling_interval] > 0 {
        ruby {
          id => "ipfix_adjust_sampled_packets"
          code => "
            event.set( '[flow][packets]', event.get('[flow][packets]').to_i * event.get('[flow][sampling_interval]').to_i )
          "
        }
      }
    }

    # Populate normalized ElastiFlow fields with source VLAN if available.
    if [ipfix][vlanId] {
      mutate {
        id => "ipfix_add_vlan"
        add_field => { "[flow][vlan]" => "%{[ipfix][vlanId]}" }
      }
    }

    if [ipfix][bgpValidityState] {
      mutate {
        id => "ipfix_add_bgp_valid_state"
        add_field => { "[flow][bgp_valid_state]" => "%{[ipfix][bgpValidityState]}" }
      }
    }
  }
}
