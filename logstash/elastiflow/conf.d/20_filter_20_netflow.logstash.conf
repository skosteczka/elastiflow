#------------------------------------------------------------------------------
# Copyright (C)2018 KOIOSSIAN
# 
# The contents of this file and/or repository are subject to the Koiossian
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/koiossian_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Koiossian. Portions created by
# Koiossian are Copyright (C)2018 Koiossian. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][type] == "netflow" {
    mutate {
      id => "netflow_init_control"
      add_field => {
        "[@metadata][lastswitched_timestamp]" => "${ELASTIFLOW_NETFLOW_LASTSW_TIMESTAMP:false}"
      }
    }

    # If flows are sent through a proxy that adds exporterIPv4Address or exporterIPv6Address, then reset node.ipaddr and node.hostname.
    if [netflow][exporterIPv4Address] or [netflow][exporterIPv6Address] {
      if [netflow][exporterIPv4Address] {
        mutate {
          id => "netflow_set_node_exporter_ipv4"
          replace => {
            "[node][ipaddr]" => "%{[netflow][exporterIPv4Address]}"
            "[node][hostname]" => "%{[netflow][exporterIPv4Address]}"
          }
        }
      } else if [netflow][exporterIPv6Address] {
        mutate {
          id => "netflow_set_node_exporter_ipv6"
          replace => {
            "[node][ipaddr]" => "%{[netflow][exporterIPv6Address]}"
            "[node][hostname]" => "%{[netflow][exporterIPv6Address]}"
          }
        }
      }

      if [@metadata][resolve_ip2host] == "true" {
        dns {
          id => "netflow_dns_node_name"
          reverse => [ "[node][hostname]" ]
          action => "replace"
          nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
        }
      }
    }
    
    # Set @timestamp to the time the flow ended.
    if [@metadata][lastswitched_timestamp] == "true" and [netflow][last_switched] {
      date {
        id => "netflow_lastswitched_timestamp"
        locale => "en"
        match => [ "[netflow][last_switched]", "ISO8601" ]
        timezone => "${ELASTIFLOW_NETFLOW_TZ:UTC}"
      }
    }

    # Populate normalized ElastiFlow fields common to both Netflow v5 and Netflow v9.
    if [netflow][sampling_interval] {
      mutate {
        id => "netflow_simple_mappings_add_sampling_interval"
        add_field => { "[flow][sampling_interval]" => "%{[netflow][sampling_interval]}" }
      }
      mutate {
        id => "netflow_simple_mappings_convert_sampling_interval"
        convert => { "[flow][sampling_interval]" => "integer" }
      }
    }
    if [netflow][input_snmp] {
      mutate {
        id => "netflow_simple_mappings_add_input_snmp"
        add_field => { "[flow][input_snmp]" => "%{[netflow][input_snmp]}" }
      }
    }
    if [netflow][output_snmp] {
      mutate {
        id => "netflow_simple_mappings_add_output_snmp"
        add_field => { "[flow][output_snmp]" => "%{[netflow][output_snmp]}" }
      }
    }
    if [netflow][protocol] {
      mutate {
        id => "netflow_simple_mappings_add_ip_protocol"
        add_field => { "[flow][ip_protocol]" => "%{[netflow][protocol]}" }
      }
      mutate {
        id => "netflow_simple_mappings_convert_ip_protocol"
        convert => { "[flow][ip_protocol]" => "integer" }
      }
    }
    if [netflow][tcp_flags] {
      mutate {
        id => "netflow_simple_mappings_add_tcp_flags"
        add_field => { "[flow][tcp_flags]" => "%{[netflow][tcp_flags]}" }
      }
    }

    #--------------------
    # The field names for Netflow v5 and v9 differ. We need to normalize to a
    # common data model so that we can work with the resulting events in a common manner.
    #--------------------

    # Process Netflow v5 events.
    if [netflow][version] == 5 {
      # Netflow v5 supports ONLY ingress flows and IPv4.
      mutate {
        id => "netflow_v5_normalize"
        add_field => {
          "[flow][direction]" => "ingress"
          "[flow][ip_version]" => "IPv4"
        }
      }

      # Populate normalized ElastiFlow fields with Netflow v5 data.
      if [netflow][ipv4_src_addr] {
        mutate {
          id => "netflow_5_simple_mappings_add_src_addr"
          add_field => { "[flow][src_addr]" => "%{[netflow][ipv4_src_addr]}" }
        }
      }
      if [netflow][src_mask] {
        mutate {
          id => "netflow_5_simple_mappings_add_src_mask_len"
          add_field => { "[flow][src_mask_len]" => "%{[netflow][src_mask]}" }
        }
      }
      if [netflow][l4_src_port] {
        mutate {
          id => "netflow_5_simple_mappings_add_src_port"
          add_field => { "[flow][src_port]" => "%{[netflow][l4_src_port]}" }
        }
        mutate {
          id => "netflow_5_simple_mappings_convert_src_port"
          convert => { "[flow][src_port]" => "integer" }
        }
      }
      if [netflow][ipv4_dst_addr] {
        mutate {
          id => "netflow_5_simple_mappings_add_dst_addr"
          add_field => { "[flow][dst_addr]" => "%{[netflow][ipv4_dst_addr]}" }
        }
      }
      if [netflow][dst_mask] {
        mutate {
          id => "netflow_5_simple_mappings_add_dst_mask_len"
          add_field => { "[flow][dst_mask_len]" => "%{[netflow][dst_mask]}" }
        }
      }
      if [netflow][l4_dst_port] {
        mutate {
          id => "netflow_5_simple_mappings_add_dst_port"
          add_field => { "[flow][dst_port]" => "%{[netflow][l4_dst_port]}" }
        }
        mutate {
          id => "netflow_5_simple_mappings_convert_dst_port"
          convert => { "[flow][dst_port]" => "integer" }
        }
      }
      if [netflow][in_bytes] {
        mutate {
          id => "netflow_5_simple_mappings_add_bytes"
          add_field => { "[flow][bytes]" => "%{[netflow][in_bytes]}" }
        }
        mutate {
          id => "netflow_5_simple_mappings_convert_bytes"
          convert => { "[flow][bytes]" => "integer" }
        }
      }
      if [netflow][in_pkts] {
        mutate {
          id => "netflow_5_simple_mappings_add_packets"
          add_field => { "[flow][packets]" => "%{[netflow][in_pkts]}" }
        }
        mutate {
          id => "netflow_5_simple_mappings_convert_packets"
          convert => { "[flow][packets]" => "integer" }
        }
      }
      if [netflow][ipv4_next_hop] {
        mutate {
          id => "netflow_5_simple_mappings_add_next_hop"
          add_field => { "[flow][next_hop]" => "%{[netflow][ipv4_next_hop]}" }
        }
      }
      if [netflow][src_tos] {
        mutate {
          id => "netflow_5_simple_mappings_add_tos"
          add_field => { "[flow][tos]" => "%{[netflow][src_tos]}" }
        }
      }
    }
    
    # Process Netflow v9 events.
    else if [netflow][version] == 9 {
      # Set IP version.
      if [netflow][ip_protocol_version] {
        mutate {
          id => "netflow_9_normalize_ip_version"
          add_field => { "[flow][ip_version]" => "IPv%{[netflow][ip_protocol_version]}" }
        }
      }

      # Populate normalized ElastiFlow fields with IPv4 or IPv6 specific fields.
      if [netflow][ipv4_src_addr] or [netflow][ipv4_dst_addr] or [netflow][ip_protocol_version] == 4 {
        # Looks like an IPv4 flow.
        if ![flow][ip_version] {
          mutate {
            id => "netflow_9_ipv4_ip_version"
            add_field => { "[flow][ip_version]" => "IPv4" }
          }
        }
      
        if [netflow][ipv4_src_addr] {
          mutate {
            id => "netflow_9_ipv4_mappings_add_src_addr"
            add_field => { "[flow][src_addr]" => "%{[netflow][ipv4_src_addr]}" }
          }
        }
        if [netflow][src_mask] {
          mutate {
            id => "netflow_9_ipv4_mappings_add_src_mask_len"
            add_field => { "[flow][src_mask_len]" => "%{[netflow][src_mask]}" }
          }
        }
        if [netflow][ipv4_dst_addr] {
          mutate {
            id => "netflow_9_ipv4_mappings_add_dst_addr"
            add_field => { "[flow][dst_addr]" => "%{[netflow][ipv4_dst_addr]}" }
          }
        }
        if [netflow][dst_mask] {
          mutate {
            id => "netflow_9_ipv4_mappings_add_dst_mask_len"
            add_field => { "[flow][dst_mask_len]" => "%{[netflow][dst_mask]}" }
          }
        }
        if [netflow][ipv4_next_hop] {
          mutate {
            id => "netflow_9_ipv4_mappings_add_next_hop"
            add_field => { "[flow][next_hop]" => "%{[netflow][ipv4_next_hop]}" }
          }
        }
        if [netflow][bgp_ipv4_next_hop] {
          mutate {
            id => "netflow_9_ipv4_mappings_add_bgp_next_hop"
            add_field => { "[flow][bgp_next_hop]" => "%{[netflow][bgp_ipv4_next_hop]}" }
          }
        }
      } else if [netflow][ipv6_src_addr] or [netflow][ipv6_dst_addr] or [netflow][ip_protocol_version] == 6 {
        # Looks like an IPv6 flow.
        if ![flow][ip_version] {
          mutate {
            id => "netflow_9_ipv6_ip_version"
            add_field => { "[flow][ip_version]" => "IPv6" }
          }
        }
        
        if [netflow][ipv6_src_addr] {
          mutate {
            id => "netflow_9_ipv6_mappings_add_src_addr"
            add_field => { "[flow][src_addr]" => "%{[netflow][ipv6_src_addr]}" }
          }
        }
        if [netflow][ipv6_src_mask] {
          mutate {
            id => "netflow_9_ipv6_mappings_add_src_mask_len"
            add_field => { "[flow][src_mask_len]" => "%{[netflow][ipv6_src_mask]}" }
          }
        }
        if [netflow][ipv6_dst_addr] {
          mutate {
            id => "netflow_9_ipv6_mappings_add_dst_addr"
            add_field => { "[flow][dst_addr]" => "%{[netflow][ipv6_dst_addr]}" }
          }
        }
        if [netflow][ipv6_dst_mask] {
          mutate {
            id => "netflow_9_ipv6_mappings_add_dst_mask_len"
            add_field => { "[flow][dst_mask_len]" => "%{[netflow][ipv6_dst_mask]}" }
          }
        }
        if [netflow][ipv6_next_hop] {
          mutate {
            id => "netflow_9_ipv6_mappings_add_next_hop"
            add_field => { "[flow][next_hop]" => "%{[netflow][ipv6_next_hop]}" }
          }
        }
        if [netflow][bgp_ipv6_next_hop] {
          mutate {
            id => "netflow_9_ipv6_mappings_add_bgp_next_hop"
            add_field => { "[flow][bgp_next_hop]" => "%{[netflow][bgp_ipv6_next_hop]}" }
          }
        }
      } else {
        # Did not recognize IP version.
        mutate {
          id => "netflow_ip_version_not_recognized"
          add_tag => [ "__netflow_ip_version_not_recognized" ]
          replace => { "[flow][ip_version]" => "undetermined" }
        }
      }
      
      # Populate normalized ElastiFlow fields with flow directiom (ingress/egress).
      if [netflow][direction] == 0 {
        mutate {
          id => "netflow_9_add_direction_ingress"
          add_field => { "[flow][direction]" => "ingress" }
        }
      } else if [netflow][direction] == 1 {
        mutate {
          id => "netflow_9_add_direction_egress"
          add_field => { "[flow][direction]" => "egress" }
        }
      } else {
        mutate {
          id => "netflow_direction_not_recognized"
          add_field => { "[flow][direction]" => "undetermined" }
          add_tag => [ "__netflow_direction_not_recognized" ]
        }
      }

      # Populate normalized ElastiFlow fields with source protocol port.
      if [netflow][l4_src_port] {
        mutate {
          id => "netflow_9_add_src_port_l4"
          add_field => { "[flow][src_port]" => "%{[netflow][l4_src_port]}" }
        }
      } else if [netflow][tcp_src_port] {
        mutate {
          id => "netflow_9_add_src_port_tcp"
          add_field => { "[flow][src_port]" => "%{[netflow][tcp_src_port]}" }
        }
      } else if [netflow][udp_src_port] {
        mutate {
          id => "netflow_9_add_src_port_udp"
          add_field => { "[flow][src_port]" => "%{[netflow][udp_src_port]}" }
        }
      }
      if [flow][src_port] {
        mutate {
          id => "netflow_9_convert_src_port"
          convert => { "[flow][src_port]" => "integer" }
        }
      }

      # Populate normalized ElastiFlow fields with destination protocol port.
      if [netflow][l4_dst_port] {
        mutate {
          id => "netflow_9_add_dst_port_l4"
          add_field => { "[flow][dst_port]" => "%{[netflow][l4_dst_port]}" }
        }
      } else if [netflow][tcp_dst_port] {
        mutate {
          id => "netflow_9_add_dst_port_tcp"
          add_field => { "[flow][dst_port]" => "%{[netflow][tcp_dst_port]}" }
        }
      } else if [netflow][udp_src_port] {
        mutate {
          id => "netflow_9_add_dst_port_udp"
          add_field => { "[flow][dst_port]" => "%{[netflow][udp_dst_port]}" }
        }
      }
      if [flow][dst_port] {
        mutate {
          id => "netflow_9_convert_dst_port"
          convert => { "[flow][dst_port]" => "integer" }
        }
      }

      # Populate normalized ElastiFlow fields with bytes transferred in the flow.
      if [netflow][in_bytes] {
        mutate {
          id => "netflow_9_in_bytes"
          add_field => { "[flow][bytes]" => "%{[netflow][in_bytes]}" }
        }
      } else if [netflow][out_bytes] {
        mutate {
          id => "netflow_9_out_bytes"
          add_field => { "[flow][bytes]" => "%{[netflow][out_bytes]}" }
        }
      } else if [netflow][in_permanent_bytes] {
        mutate {
          id => "netflow_9_in_permanent_bytes"
          add_field => { "[flow][bytes]" => "%{[netflow][in_permanent_bytes]}" }
        }
      } else if [netflow][fwd_flow_delta_bytes] or [netflow][rev_flow_delta_bytes] {
        ruby {
          id => "netflow_9_normalize_bytes_from_fwd_rev_bytes"
          code => "
            event.set( '[flow][bytes]', event.get('[netflow][fwd_flow_delta_bytes]').to_i + event.get('[netflow][rev_flow_delta_bytes]').to_i )
          "
        }
      }
      if [flow][bytes] {
        mutate {
          id => "netflow_9_convert_bytes"
          convert => { "[flow][bytes]" => "integer" }
        }
      }
      
      # Populate normalized ElastiFlow fields with packets transferred in the flow.
      if [netflow][in_pkts] {
        mutate {
          id => "netflow_9_in_pkts"
          add_field => { "[flow][packets]" => "%{[netflow][in_pkts]}" }
        }
      } else if [netflow][out_pkts] {
        mutate {
          id => "netflow_9_out_pkts"
          add_field => { "[flow][packets]" => "%{[netflow][out_pkts]}" }
        }
      } else if [netflow][in_permanent_pkts] {
        mutate {
          id => "netflow_9_in_permanent_pkts"
          add_field => { "[flow][packets]" => "%{[netflow][in_permanent_pkts]}" }
        }
      } else if [netflow][initiatorPackets] or [netflow][responderPackets] {
        ruby {
          id => "netflow_9_normalize_packets_from_init_resp_pkts"
          code => "
            event.set( '[flow][packets]', event.get('[netflow][initiatorPackets]').to_i + event.get('[netflow][responderPackets]').to_i )
          "
        }
      }
      if [flow][packets] {
        mutate {
          id => "netflow_9_convert_packets"
          convert => { "[flow][packets]" => "integer" }
        }
      }

      # Populate normalized ElastiFlow fields with source and destination MAC addresses if available.
      if [netflow][in_src_mac] {
        mutate {
          id => "netflow_9_add_src_mac_in"
          add_field => { "[flow][src_mac]" => "%{[netflow][in_src_mac]}" }
        }
      } else if [netflow][out_src_mac] {
        mutate {
          id => "netflow_9_add_src_mac_out"
          add_field => { "[flow][src_mac]" => "%{[netflow][out_src_mac]}" }
        }
      }
      if [netflow][in_dst_mac] {
        mutate {
          id => "netflow_9_add_dst_mac_in"
          add_field => { "[flow][dst_mac]" => "%{[netflow][in_dst_mac]}" }
        }
      } else if [netflow][out_dst_mac] {
        mutate {
          id => "netflow_9_add_dst_mac_out"
          add_field => { "[flow][dst_mac]" => "%{[netflow][out_dst_mac]}" }
        }
      }

      # Populate normalized ElastiFlow fields with source VLAN if available.
      if [netflow][src_vlan] {
        mutate {
          id => "netflow_9_add_vlan"
          add_field => { "[flow][vlan]" => "%{[netflow][src_vlan]}" }
        }
      } else if [netflow][dst_vlan] {
        mutate {
          id => "netflow_9_add_vlan_dst"
          add_field => { "[flow][vlan]" => "%{[netflow][dst_vlan]}" }
        }
      }

      if [netflow][src_tos] {
        mutate {
          id => "netflow_9_add_tos"
          add_field => { "[flow][tos]" => "%{[netflow][src_tos]}" }
        }
      }

      if [netflow][bgpValidityState] {
        mutate {
          id => "netflow_9_add_bgp_valid_state"
          add_field => { "[flow][bgp_valid_state]" => "%{[netflow][bgpValidityState]}" }
        }
      }
    }

    # Netflow version was not recognized.
    else {
      mutate {
        id => "netflow_version_not_recognized"
        add_tag => [ "__netflow_version_not_recognized" ]
      }
    }

    # If sampled Netflow, adjust Bytes and Packets accordingly.
    if [flow][sampling_interval] {
      if [flow][bytes] and [flow][sampling_interval] > 0 {
        ruby {
          id => "netflow_adjust_sampled_bytes"
          code => "
            event.set( '[flow][bytes]', event.get('[flow][bytes]').to_i * event.get('[flow][sampling_interval]').to_i )
          "
        }
      }
      if [flow][packets] and [flow][sampling_interval] > 0 {
        ruby {
          id => "netflow_adjust_sampled_packets"
          code => "
            event.set( '[flow][packets]', event.get('[flow][packets]').to_i * event.get('[flow][sampling_interval]').to_i )
          "
        }
      }
    }
  }
}
